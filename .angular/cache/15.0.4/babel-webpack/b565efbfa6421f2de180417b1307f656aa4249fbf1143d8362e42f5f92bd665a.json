{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../booking.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nfunction BookingsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"small\", 3);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 4)(5, \"a\", 5);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function BookingsComponent_div_0_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const booking_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deleteBooking(booking_r1));\n    });\n    i0.ɵɵtext(8, \"delete\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"p\", 3);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵpipe(12, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"small\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const booking_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Booking ID: \", booking_r1.id, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/edit/\", booking_r1.id, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(booking_r1.name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind2(11, 6, booking_r1.startDate, \"dd/MM/yy\"), \" - \", i0.ɵɵpipeBind2(12, 9, booking_r1.endDate, \"dd/MM/yy\"), \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Room: \", booking_r1.roomNumber, \"\");\n  }\n}\nexport class BookingsComponent {\n  constructor(bookingService) {\n    this.bookingService = bookingService;\n    this.bookings = [];\n  }\n  ngOnInit() {\n    // subscribe -> asynchron. wartet auf die Antwort. Wenn die Antwort da ist wird this.bookings mit dem inhalt aus result befüllt.\n    this.bookingService.getBookings().subscribe(result => {\n      this.bookings = result;\n    });\n  }\n  deleteBooking(booking) {\n    this.bookingService.deleteBooking(booking).subscribe();\n    this.bookingService.getBookings().subscribe(result => {\n      this.bookings = result;\n    });\n  }\n}\nBookingsComponent.ɵfac = function BookingsComponent_Factory(t) {\n  return new (t || BookingsComponent)(i0.ɵɵdirectiveInject(i1.BookingService));\n};\nBookingsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BookingsComponent,\n  selectors: [[\"app-bookings\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"list-group\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group\"], [\"aria-current\", \"true\", 1, \"mb-2\", \"list-group-item\", \"list-group-item-action\"], [1, \"mb-1\"], [1, \"d-flex\", \"w-100\", \"justify-content-between\"], [1, \"mb-1\", \"h5\", \"text-primary\", 3, \"routerLink\"], [1, \"btn\", \"btn-danger\", 3, \"click\"]],\n  template: function BookingsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BookingsComponent_div_0_Template, 15, 12, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.bookings);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.RouterLink, i2.DatePipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;IACAA,8BAAyD;IAE/BA,YAA0B;IAAAA,iBAAQ;IACtDA,8BAAkD;IACkBA,YAAgB;IAAAA,iBAAI;IACtFA,iCAAgE;IAAxDA;MAAA;MAAA;MAAA;MAAA,OAASA,+CAAsB;IAAA,EAAC;IAAwBA,sBAAM;IAAAA,iBAAS;IAEjFA,4BAAgB;IAAAA,aAAkF;;;IAAAA,iBAAI;IACtGA,8BAAO;IAAAA,aAA4B;IAAAA,iBAAQ;;;;IANvBA,eAA0B;IAA1BA,wDAA0B;IAEzCA,eAAiC;IAAjCA,oEAAiC;IAA8BA,eAAgB;IAAhBA,qCAAgB;IAGpEA,eAAkF;IAAlFA,oJAAkF;IAC3FA,eAA4B;IAA5BA,0DAA4B;;;ACDzC,OAAM,MAAOC,iBAAiB;EAI9BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAFlC,aAAQ,GAAgB,EAAE;EAI1B;EACEC,QAAQ;IACN;IACA,IAAI,CAACD,cAAc,CAACE,WAAW,EAAE,CAACC,SAAS,CAAEC,MAAM,IAAI;MAAE,IAAI,CAACC,QAAQ,GAAGD,MAAM;IAAA,CAAC,CAAC;EACnF;EAGFE,aAAa,CAACC,OAAgB;IAE5B,IAAI,CAACP,cAAc,CAACM,aAAa,CAACC,OAAO,CAAC,CAACJ,SAAS,EAAE;IACtD,IAAI,CAACH,cAAc,CAACE,WAAW,EAAE,CAACC,SAAS,CAAEC,MAAM,IAAI;MAAE,IAAI,CAACC,QAAQ,GAAGD,MAAM;IAAA,CAAC,CAAC;EACnF;;AAjBaN,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAU;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDP9Bf,oEAUQ;;;MAVoCA,sCAAW","names":["i0","BookingsComponent","constructor","bookingService","ngOnInit","getBookings","subscribe","result","bookings","deleteBooking","booking","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\mlade\\angular\\hotel-app\\src\\app\\bookings\\bookings.component.html","C:\\Users\\mlade\\angular\\hotel-app\\src\\app\\bookings\\bookings.component.ts"],"sourcesContent":["\r\n<div class=\"list-group\" *ngFor=\"let booking of bookings\">\r\n    <div class=\"mb-2 list-group-item list-group-item-action\" aria-current=\"true\">\r\n      <small class=\"mb-1\">Booking ID: {{booking.id}}</small>\r\n      <div class=\"d-flex w-100 justify-content-between\">\r\n        <a routerLink=\"/edit/{{booking.id}}\" class=\"mb-1 h5 text-primary\">{{booking.name}}</a>\r\n        <button (click)=\"deleteBooking(booking)\" class=\"btn btn-danger\">delete</button>\r\n      </div>\r\n      <p class=\"mb-1\">{{booking.startDate | date: 'dd/MM/yy' }} - {{booking.endDate |date: 'dd/MM/yy' }}</p>\r\n      <small>Room: {{booking.roomNumber}}</small>\r\n    </div>\r\n  </div>\r\n  \r\n  ","import { Component, OnInit } from '@angular/core';\r\nimport { Booking } from '../booking';\r\nimport { BookingService } from '../booking.service';\r\n@Component({\r\n  selector: 'app-bookings',\r\n  templateUrl: './bookings.component.html',\r\n  styleUrls: ['./bookings.component.css']\r\n})\r\nexport class BookingsComponent implements OnInit{\r\n\r\nbookings : Booking [] = [];\r\n\r\nconstructor(private bookingService: BookingService){\r\n\r\n}\r\n  ngOnInit(): void {\r\n    // subscribe -> asynchron. wartet auf die Antwort. Wenn die Antwort da ist wird this.bookings mit dem inhalt aus result befüllt.\r\n    this.bookingService.getBookings().subscribe((result) => {this.bookings = result});\r\n  }\r\n\r\n\r\ndeleteBooking(booking: Booking): void{\r\n\r\n  this.bookingService.deleteBooking(booking).subscribe();\r\n  this.bookingService.getBookings().subscribe((result) => {this.bookings = result});\r\n}\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}