{"ast":null,"code":"import { Bookings } from './mock-bookings';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookingService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // aus dem createDb() das bookings deswegen heißt es hier so in der Url. /api ist frei wählbar\n    this.bookingsUrl = \"/api/bookings\";\n  }\n  getBookings() {\n    var result = this.httpClient.get(this.bookingsUrl);\n    return result;\n  }\n  deleteBooking(booking) {\n    var index = Bookings.indexOf(booking);\n    Bookings.splice(index, 1);\n  }\n  getBookingById(id) {\n    var bookingById = Bookings.find(b => b.id == id);\n    return bookingById;\n  }\n  addBooking(booking) {\n    Bookings.push(booking);\n  }\n  updateBooking(booking) {\n    let currentBooking = this.getBookingById(booking.id);\n    currentBooking = booking;\n  }\n}\nBookingService.ɵfac = function BookingService_Factory(t) {\n  return new (t || BookingService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookingService,\n  factory: BookingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,QAAQ,QAAQ,iBAAiB;;;AAO1C,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAE9B;IACA,gBAAW,GAAG,eAAe;EAHiB;EAK9CC,WAAW;IAET,IAAIC,MAAM,GAAG,IAAI,CAACF,UAAU,CAACG,GAAG,CAAY,IAAI,CAACC,WAAW,CAAC;IAE7D,OAAOF,MAAM;EACf;EAEAG,aAAa,CAACC,OAAgB;IAE5B,IAAIC,KAAK,GAAGV,QAAQ,CAACW,OAAO,CAACF,OAAO,CAAC;IACrCT,QAAQ,CAACY,MAAM,CAACF,KAAK,EAAC,CAAC,CAAC;EAC1B;EAEAG,cAAc,CAACC,EAAU;IACvB,IAAIC,WAAW,GAAGf,QAAQ,CAACgB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,IAAIA,EAAE,CAAE;IACjD,OAAOC,WAAW;EACpB;EAEAG,UAAU,CAACT,OAAgB;IACzBT,QAAQ,CAACmB,IAAI,CAACV,OAAO,CAAC;EACxB;EAEAW,aAAa,CAACX,OAAgB;IAC5B,IAAIY,cAAc,GAAG,IAAI,CAACR,cAAc,CAACJ,OAAO,CAACK,EAAE,CAAC;IACpDO,cAAc,GAAGZ,OAAO;EAC1B;;AAhCWR,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;EAAAsB,YAFb;AAAM","names":["Bookings","BookingService","constructor","httpClient","getBookings","result","get","bookingsUrl","deleteBooking","booking","index","indexOf","splice","getBookingById","id","bookingById","find","b","addBooking","push","updateBooking","currentBooking","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\mlade\\angular\\hotel-app\\src\\app\\booking.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Booking } from './booking';\r\nimport { Bookings } from './mock-bookings';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookingService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  // aus dem createDb() das bookings deswegen heißt es hier so in der Url. /api ist frei wählbar\r\n  bookingsUrl = \"/api/bookings\"\r\n\r\n  getBookings(): Observable<Booking[]>{\r\n\r\n    var result = this.httpClient.get<Booking[]>(this.bookingsUrl);\r\n\r\n    return result;\r\n  }\r\n\r\n  deleteBooking(booking: Booking): void{\r\n\r\n    var index = Bookings.indexOf(booking);\r\n    Bookings.splice(index,1);\r\n  }\r\n\r\n  getBookingById(id: number):Booking{\r\n    var bookingById = Bookings.find(b => b.id == id)!;\r\n    return bookingById;\r\n  }\r\n\r\n  addBooking(booking: Booking): void{\r\n    Bookings.push(booking);\r\n  }\r\n\r\n  updateBooking(booking: Booking): void {\r\n    let currentBooking = this.getBookingById(booking.id);\r\n    currentBooking = booking;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}